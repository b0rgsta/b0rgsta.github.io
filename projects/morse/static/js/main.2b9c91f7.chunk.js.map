{"version":3,"sources":["components/Keyboard/Keyboard.module.scss","components/Key/Key.module.scss","components/Header/Header.module.scss","components/TypeField/TypeField.module.scss","containers/TypeScreens/TypeScreens.module.scss","assets/audio/keyboard_click.wav","assets/audio/squeakySqueak.wav","components/Key/Key.jsx","components/Key/index.js","services/translator.js","components/Keyboard/index.js","services/utils.js","components/Keyboard/Keyboard.jsx","components/Header/index.js","components/Header/Header.jsx","components/TypeField/index.js","components/TypeField/TypeField.jsx","containers/TypeScreens/index.js","containers/TypeScreens/TypeScreens.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Key","onType","char","morse","width","className","styles","onClick","Audio","clickSound","play","squeakySqueak","style","defaultProps","'","Keyboard","object","Error","Object","keys","reduce","newObj","orginalKey","flipObj","main","row","Header","title","TypeField","value","screen","TypeScreens","englishValue","morseValue","typeScreens","App","useState","englishText","setEnglishText","morseText","setMorseText","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b9c91f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Keyboard_main__2EO70\",\"row\":\"Keyboard_row__24X8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Key\":\"Key_Key__9PYLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3SEjb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"TypeField_screen__13WJt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeScreens\":\"TypeScreens_typeScreens__3zgLU\"};","export default __webpack_public_path__ + \"static/media/keyboard_click.d5e8c37f.wav\";","export default __webpack_public_path__ + \"static/media/squeakySqueak.67c67878.wav\";","import styles from './Key.module.scss';\nimport PropTypes from 'prop-types';\nimport clickSound from '../../assets/audio/keyboard_click.wav';\nimport squeakySqueak from '../../assets/audio/squeakySqueak.wav';\n\n/**\n * This component creates keyboard keys each with characters and morse code.\n * @param {(char: string, morse: string) => void} onType - a function that runs when a key is pressed.\n * @param char - keyboard character\n * @param morse - corresponding morse code\n * @param width - specifies key width\n */\nconst Key = ({onType, char, morse, width}) => {\n\n  return (\n    <button className={styles.Key} onClick={() => {\n      //if 'return' is clicked, play sound (no onType func required)\n      if (char === 'return') {\n        let sound = new Audio(squeakySqueak);\n        sound.play();\n        return;\n      }\n\n      let sound = new Audio(clickSound);\n      sound.play();\n\n      //\n      onType(char, morse);\n    }} style={{width: `${width}%`}}>\n      <span>{char}</span>\n      <span>{morse}</span>\n    </button>\n  );\n};\n\nKey.defaultProps = {\n  width: 6\n};\n\nKey.propTypes = {\n  onType: PropTypes.func.isRequired,\n  char: PropTypes.string.isRequired,\n  morse: PropTypes.string.isRequired,\n  width: PropTypes.number\n};\n\nexport default Key;","import Key from './Key';\nexport default Key","import {flipObj} from './utils.js';\n\n//object containing english to morse conversion\nexport const morse = {\n  'end': '...-.-',\n  'error': '......',\n  'wait': '.-...',\n  'understood': '...-.',\n  '&': '.-...',\n  '\\n': '|',\n  ' ': '|',\n  '': '',\n  'a': '.-',\n  'b': '-...',\n  'c': '-.-.',\n  'd': '-..',\n  'e': '.',\n  'f': '..-.',\n  'g': '--.',\n  'h': '....',\n  'i': '..',\n  'j': '.---',\n  'k': '-.-',\n  'l': '.-..',\n  'm': '--',\n  'n': '-.',\n  'o': '---',\n  'p': '.--.',\n  'q': '--.-',\n  'r': '.-.',\n  's': '...',\n  't': '-',\n  'u': '..-',\n  'v': '...-',\n  'w': '.--',\n  'x': '-..-',\n  'y': '-.--',\n  'z': '--..',\n  '1': '.---',\n  '2': '..---',\n  '3': '...--',\n  '4': '....-',\n  '5': '.....',\n  '6': '-....',\n  '7': '--...',\n  '8': '---..',\n  '9': '----.',\n  '0': '-----',\n  '!': '-.-.--',\n  '?': '..--..',\n  '.': '.-.-.-',\n  ',': '--..--',\n  '@': '.--.-.',\n  '\\'': '.----.',\n  ':': '---...',\n  ';': '-.-.-.',\n  '\"': '.-..-.',\n  '$': '...-..-',\n  '/': '-..-.',\n  '(': '-.--.',\n  ')': '-.--.-',\n  '=': '-...-',\n  '+': '.-.-.',\n  '-': '-....-',\n  '_': '..--.-'\n};\n\n//switching keys and values {eng: \"morse\"}\nconst englishTranslation = flipObj(morse);\n\n\n\n/**\n * Given a string will convert characters into morse code.\n * @param {string | number} input\n * @return {string}\n */\nexport const engToMorse = (input) => {\n  return String(input)\n    .toLowerCase()\n    .split('')\n    .map((character) => {\n      //checks that all characters are translatable, else throws error.\n      if (!Object.keys(morse).includes(character)) {\n        throw new Error('Invalid character entered.');\n      }\n      //returns morse code to new array being created.\n      return morse[character];\n    })\n    //creates a string of code seperated by spaces.\n    .join(' ');\n};\n\n/**\n * Given morse code will convert morse into a string of characters.\n * @param {string} morse\n * @return {string}\n */\nexport const morseToEng = (morse) => {\n\n  if (morse === '') return ''\n\n  //throws error to use if input is not a string (not required in UI but required to pass tests)\n  if (typeof morse !== 'string') {\n    throw new Error('Invalid input. Morse code must be a string.');\n  }\n\n  //throws error if every char in users code is NOT an accepted char.\n  if (morse.split('').some((character) => {\n    return !['.', '-', '|', ' '].includes(character);\n  })) {\n    throw new Error('Invalid input. Morse code must only contain \\'. - | _\\' characters.');\n  }\n\n  return String(morse)\n    //creates an array of items seperated by spaces in the morse code\n    .split(' ')\n    //checks that all items in the array are translatable morse code, otherwise throws error.\n    .map((code) => {\n      if (!Object.keys(englishTranslation).includes(code)) {\n        throw new Error('Invalid code entered.');\n      }\n      //returns the english alphabet to a new array\n      return englishTranslation[code];\n    })\n    //turns array of letter into a string\n    .join('');\n};\n\n","import Keyboard from './Keyboard';\nexport default Keyboard","\n/**\n * This function take an object and switches each value with its key.\n * @param object\n * @return {{}}\n */\nexport function flipObj(object) {\n  //handles empty objects\n  if (object === {}) {\n    return {};\n    //throws error if not an object\n  } else if (typeof object !== 'object') {\n    throw new Error('not a valid input');\n  }\n\n  return Object\n    .keys(object)\n    //iterates through inputs keys\n    .reduce((newObj, orginalKey) => {\n\n      let newKey = object[orginalKey];\n      // output[\"andrew\"] = \"name\"\n\n      newObj[newKey] = orginalKey;\n      // output: {andrew: \"name\"}\n      return newObj;\n    }, {});\n}","import styles from './Keyboard.module.scss';\nimport Key from '../Key';\nimport {morse} from '../../services/translator';\nimport PropTypes from 'prop-types';\n\n/**\n * This component creates a keyboard\n * @param onType - defines the function which runs when a key is pressed.\n */\nconst Keyboard = ({onType}) => {\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.row}>\n        <Key onType={onType} char={'\"'} morse={morse['\"']}/>\n        <Key onType={onType} char={'1'} morse={morse['1']}/>\n        <Key onType={onType} char={'2'} morse={morse['2']}/>\n        <Key onType={onType} char={'3'} morse={morse['3']}/>\n        <Key onType={onType} char={'4'} morse={morse['4']}/>\n        <Key onType={onType} char={'5'} morse={morse['5']}/>\n        <Key onType={onType} char={'6'} morse={morse['6']}/>\n        <Key onType={onType} char={'7'} morse={morse['7']}/>\n        <Key onType={onType} char={'8'} morse={morse['8']}/>\n        <Key onType={onType} char={'9'} morse={morse['9']}/>\n        <Key onType={onType} char={'0'} morse={morse['0']}/>\n        <Key onType={onType} char={'-'} morse={morse['-']}/>\n        <Key onType={onType} char={'+'} morse={morse['+']}/>\n        <Key onType={onType} char={'clear'} morse={''} width={9.5}/>\n      </div>\n      <div className={styles.row}>\n        <Key onType={onType} char={'error'} width={9.5} morse={morse['error']}/>\n        <Key onType={onType} char={'Q'} morse={morse['q']}/>\n        <Key onType={onType} char={'W'} morse={morse['w']}/>\n        <Key onType={onType} char={'E'} morse={morse['e']}/>\n        <Key onType={onType} char={'R'} morse={morse['r']}/>\n        <Key onType={onType} char={'T'} morse={morse['t']}/>\n        <Key onType={onType} char={'Y'} morse={morse['y']}/>\n        <Key onType={onType} char={'U'} morse={morse['u']}/>\n        <Key onType={onType} char={'I'} morse={morse['i']}/>\n        <Key onType={onType} char={'O'} morse={morse['o']}/>\n        <Key onType={onType} char={'P'} morse={morse['p']}/>\n        <Key onType={onType} char={'('} morse={morse['(']}/>\n        <Key onType={onType} char={')'} morse={morse[')']}/>\n        <Key onType={onType} char={';'} morse={morse[';']}/>\n      </div>\n      <div className={styles.row}>\n        <Key onType={onType} width={11} char={'&'} morse={morse['&']}/>\n        <Key onType={onType} char={'A'} morse={morse['a']}/>\n        <Key onType={onType} char={'S'} morse={morse['s']}/>\n        <Key onType={onType} char={'D'} morse={morse['d']}/>\n        <Key onType={onType} char={'F'} morse={morse['f']}/>\n        <Key onType={onType} char={'G'} morse={morse['g']}/>\n        <Key onType={onType} char={'H'} morse={morse['h']}/>\n        <Key onType={onType} char={'J'} morse={morse['j']}/>\n        <Key onType={onType} char={'K'} morse={morse['k']}/>\n        <Key onType={onType} char={'L'} morse={morse['l']}/>\n        <Key onType={onType} char={':'} morse={morse[':']}/>\n        <Key onType={onType} char={'\\''} morse={morse['\\'']}/>\n        <Key onType={onType} width={11.5} char={'return'} morse={morse['']}/>\n      </div>\n      <div className={styles.row}>\n        <Key onType={onType} width={15} char={'wait'} morse={morse['wait']}/>\n        <Key onType={onType} char={'Z'} morse={morse['z']}/>\n        <Key onType={onType} char={'X'} morse={morse['x']}/>\n        <Key onType={onType} char={'C'} morse={morse['c']}/>\n        <Key onType={onType} char={'V'} morse={morse['v']}/>\n        <Key onType={onType} char={'B'} morse={morse['b']}/>\n        <Key onType={onType} char={'N'} morse={morse['n']}/>\n        <Key onType={onType} char={'M'} morse={morse['m']}/>\n        <Key onType={onType} char={','} morse={morse[',']}/>\n        <Key onType={onType} char={'.'} morse={morse['.']}/>\n        <Key onType={onType} char={'/'} morse={morse['/']}/>\n        <Key onType={onType} width={15} char={'understood'} morse={morse['understood']}/>\n\n      </div>\n      <div className={styles.row}>\n        <Key onType={onType} char={'?'} morse={morse['?']}/>\n        <Key onType={onType} char={'!'} morse={morse['!']}/>\n        <Key onType={onType} char={'@'} morse={morse['@']}/>\n        <Key onType={onType} char={'$'} morse={morse['$']}/>\n        <Key onType={onType} width={50} char={' '} morse={morse[' ']}/>\n        <Key onType={onType} char={'_'} morse={morse['_']}/>\n        <Key onType={onType} char={'end'} morse={morse['end']}/>\n        <Key onType={onType} char={'='} morse={morse['=']}/>\n\n      </div>\n\n    </div>\n  );\n};\n\nKeyboard.propTypes = {\n  onType: PropTypes.func.isRequired\n};\n\nexport default Keyboard;\n\n","import Header from './Header';\nexport default Header","import styles from \"./Header.module.scss\"\n\nconst Header = () => {\n  return (\n    <div>\n      <h1 className={styles.title}>Morse Code Translator</h1>\n    </div>\n  );\n};\n\nexport default Header;","import TypeField from './TypeField';\nexport default TypeField","import styles from './TypeField.module.scss';\nimport PropTypes from 'prop-types';\n\n/**\n *This component creates a single text field which renders text to the screen.\n * @param value - the text that will render on screen.\n */\nconst TypeField = ({value}) => {\n  return (\n    <textarea value={value} className={styles.screen}>\n\n    </textarea>\n  );\n};\n\nTypeField.propTypes = {\n  value: PropTypes.string.isRequired\n};\nexport default TypeField;\n\n","import TypeScreens from './TypeScreens';\nexport default TypeScreens","import TypeField from '../../components/TypeField';\nimport styles from './TypeScreens.module.scss';\n\n/**\n * This component holds 2 text fields. 1 for each variant(eng/morse).\n * @param englishValue - english text\n * @param morseValue - morse code.\n */\nconst TypeScreens = ({englishValue, morseValue}) => {\n  return (\n    <div className={styles.typeScreens}>\n      <TypeField value={englishValue}/>\n      <TypeField value={morseValue}/>\n    </div>\n  );\n};\n\nexport default TypeScreens;","import './App.css';\nimport Keyboard from './components/Keyboard';\nimport Header from './components/Header';\nimport TypeScreens from './containers/TypeScreens';\nimport {useState} from 'react';\n\nfunction App() {\n\n  const [englishText, setEnglishText] = useState('');\n  const [morseText, setMorseText] = useState('');\n\n\n  return (\n    <>\n      <Header/>\n      <TypeScreens englishValue={englishText} morseValue={morseText}/>\n\n      <Keyboard onType={(char, morse) => {\n        console.log(char)\n        if (char === 'clear') {\n          setMorseText('');\n          setEnglishText('');\n          return\n        }\n        setEnglishText(englishText + char);\n        setMorseText(morseText + ' ' + morse);\n      }}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}